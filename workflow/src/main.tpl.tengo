// Import required modules
wf := import("@platforma-sdk/workflow-tengo:workflow")
render := import("@platforma-sdk/workflow-tengo:render")
smart := import("@platforma-sdk/workflow-tengo:smart")
file := import("@platforma-sdk/workflow-tengo:file")
exec := import("@platforma-sdk/workflow-tengo:exec")    // Command execution utilities
assets:= import("@platforma-sdk/workflow-tengo:assets") // Asset management
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv") // CSV/TSV handling
ll := import("@platforma-sdk/workflow-tengo:ll")        // Logging utilities
pframes := import("@platforma-sdk/workflow-tengo:pframes") // Data frames handling
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec") // Specification utilities
text := import("text")                                   // Text manipulation utilities
json := import("json") // Import json module for encoding

calculateLiabilitiesTpl := assets.importTemplate(":liabilities-calculation")
processTpl := assets.importTemplate(":process")
// Prepare phase of the workflow - collects and sets up required data
wf.prepare(func(args) {

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains()  // Allow missing domains in the input data
	bundleBuilder.addAnchor("main", args.inputAnchor)  // Set the main anchor point for data

	// Collect all amino acid sequences from the input data
	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }],
	//	name: "pl7.app/vdj/sequence",
		annotations: {
			"pl7.app/vdj/isAssemblingFeature": "true"
		},
		domain: {
			"pl7.app/alphabet": "aminoacid"
			}
		}, "sequences")

	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }],
		name: "pl7.app/vdj/sequence/annotation",
		annotations: {
			"pl7.app/sequence/isAnnotation": "true"
		},
		domain: {
			"pl7.app/alphabet": "aminoacid",
          	"pl7.app/sequence/annotation/type": "CDRs"
		}
	}, "annotations")

	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }],
		name: "pl7.app/vdj/sequence",
		domain: {
			"pl7.app/alphabet": "aminoacid"
		}
	}, "additionalSequences")

		return {
			columns: bundleBuilder.build()  // Build the column bundle for processing
		}
	}
)

wf.body(func(args) {
	columnsWithSequences := args.columns
	sequences := columnsWithSequences.getColumns("sequences")
	annotations := columnsWithSequences.getColumns("annotations")
	additionalSequences := columnsWithSequences.getColumns("additionalSequences")
	datasetSpec := columnsWithSequences.getSpec(args.inputAnchor)
	liabilityTypes := args.liabilityTypes


	// Determine if we're working with single cell data
	isSingleCell := datasetSpec.axesSpec[1].name == "pl7.app/vdj/scClonotypeKey"

	// Start building the table with sequence data
	seqTableBuilder := columnsWithSequences.xsvTableBuilder() // Use a different name to avoid confusion before build()
	seqTableBuilder.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")

	// Determine the primary assembling feature (e.g., CDR3)
	// This assumes all 'sequences' share the same core feature or takes the first one's.
	feature := ""
	if len(sequences) > 0 {
		feature = sequences[0].spec.domain["pl7.app/vdj/feature"]
	} else {
		ll.panic("No sequences found to determine the primary feature.") // Or handle as an error/empty case
	}

	hasAnnotations := len(annotations) > 0

	// Track which features are actually present in the data
	coveredFeatures := {}

	if isSingleCell {
		// Single-cell data handling
		// Add primary chain sequences
		for seq_entry in sequences {
			if seq_entry.spec.name == "pl7.app/vdj/scFv-sequence" {
				for additionalSeq in additionalSequences {
					if additionalSeq.spec.domain["pl7.app/vdj/scClonotypeChain/index"] == "primary" {
						for fr in ["CDR1", "CDR2", "CDR3", "FR1"] {
							if additionalSeq.spec.domain["pl7.app/vdj/feature"] == fr {
								chain := additionalSeq.spec.domain["pl7.app/vdj/scClonotypeChain"]
								chainLabel := (chain == "A" ? "Heavy" : "Light")	
								seqTableBuilder.add(additionalSeq.key, {header: chainLabel + " " + fr + " aa"})
								if coveredFeatures[fr] {
									coveredFeatures[fr] += 1
								} else {
									coveredFeatures[fr] = 1
								}
							}
						}
					}
				}
			} else if seq_entry.spec.domain["pl7.app/vdj/scClonotypeChain/index"] == "primary" {
				chain := seq_entry.spec.domain["pl7.app/vdj/scClonotypeChain"]
				chainLabel := (chain == "A" ? "Heavy" : "Light")
				seqTableBuilder.add(seq_entry.key, {header: chainLabel + " " + " sequence aa"})
			}
		}
		// Add primary chain annotations if they exist
		if hasAnnotations {
			for ann_entry in annotations {
				if ann_entry.spec.domain["pl7.app/vdj/scClonotypeChain/index"] == "primary" {
					chain := ann_entry.spec.domain["pl7.app/vdj/scClonotypeChain"]
					chainLabel := (chain == "A" ? "Heavy" : "Light")
					// Python script expects annotation columns to end with "annotations"
					// and might derive prefix like "Heavy CDRs" or "Light CDRs"
					seqTableBuilder.add(ann_entry.key, {header: chainLabel + " annotations"})
				}
			}
		}
	} else { // Bulk data handling
		// Add the primary sequence
		if len(sequences) > 0 {
			seqTableBuilder.add(sequences[0].key, {header: "sequence aa"})
		}
		// Add annotations if they exist
		if hasAnnotations {
			// Python script expects annotation column to end with "annotations"
			seqTableBuilder.add(annotations[0].key, {header: "Annotations"})
		}
	}

	features := []
	for k, v in coveredFeatures {
		features += [k]
	}

	// Build the final TSV table
	seqTableBuilder = seqTableBuilder.build("tsv") // Assign to a new variable

	liabilitiesResultCalc := render.create(calculateLiabilitiesTpl, {
		table: seqTableBuilder,
		mapping: hasAnnotations ? annotations[0].spec.annotations["pl7.app/sequence/annotation/mapping"] : undefined,
		liabilityTypes: liabilityTypes
	})

	liabilitiesResult := liabilitiesResultCalc.output("result", 24 * 60 * 60 * 1000)
	newMapping := liabilitiesResultCalc.output("newMapping", 24 * 60 * 60 * 1000)
	regionsFound := liabilitiesResultCalc.output("regionsFound", 24 * 60 * 60 * 1000)

	processResult := render.create(processTpl, {
		liabilitiesTable: liabilitiesResult,
		newMapping: newMapping,
		regionsFound: regionsFound,
		params: smart.createJsonResource({
			datasetSpec: datasetSpec,
			isSingleCell: isSingleCell,
			coveredFeatures: features,
			hasAnnotations: hasAnnotations,
			liabilityTypes: liabilityTypes
		})
	})

	outputLiabilities := processResult.output("outputLiabilities", 24 * 60 * 60 * 1000)
	exportPframe := processResult.output("exportPframe", 24 * 60 * 60 * 1000)

	// Return the output and export the results
	return {
		outputs: {
			outputLiabilities: outputLiabilities
		},
		exports: {
			exportPframe: exportPframe
		}
	}
})
