// Import required modules
wf := import("@platforma-sdk/workflow-tengo:workflow")  // Workflow utilities
exec := import("@platforma-sdk/workflow-tengo:exec")    // Command execution utilities
assets:= import("@platforma-sdk/workflow-tengo:assets") // Asset management
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv") // CSV/TSV handling
ll := import("@platforma-sdk/workflow-tengo:ll")        // Logging utilities
pframes := import("@platforma-sdk/workflow-tengo:pframes") // Data frames handling
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec") // Specification utilities
text := import("text")                                   // Text manipulation utilities
// Import the liabilities calculation software
liabilitiesCalcSw := assets.importSoftware("@platforma-open/milaboratories.antibody-sequence-liabilities.liabilities-calc-script:main")


// Prepare phase of the workflow - collects and sets up required data
wf.prepare(func(args) {
	clonotypingRunId := args.clonotypingRunId  // The ID of the clonotyping run
	chain := args.chain                        // The antibody chain (if specified)
	isSingleCell := args.isSingleCell          // Flag indicating if data comes from a single cell analysis

	// Helper function to construct data query based on feature and data type
	query := func(feature, isSingleCell) {
		// Base query
		queryUniversal := {
			type: "And",
			operands:  [
				{
					type: "Domain",
					domain: {
						"pl7.app/alphabet": "aminoacid",
          				"pl7.app/vdj/feature": feature  // CDR1, CDR2, CDR3, or FR1
					},
					domainExactMatch: false
				},
				{
					type: "Name",
					name: "pl7.app/vdj/sequence"
				},
				{
					type: "AxesKeys",
					axesKeys: [
						{
							domain: {
								"pl7.app/vdj/clonotypingRunId": clonotypingRunId
							},
							domainExactMatch: false
						}
					],
					partialMatch: true
				}
			]
		}
		
		// If chain is specified -> bulk data
		if !is_undefined(chain) {
			queryUniversal.operands[2].axesKeys[0].domain["pl7.app/vdj/chain"] = chain
			queryUniversal.operands[2].axesKeys[0].name = "pl7.app/vdj/clonotypeKey"
			return queryUniversal
		} else if isSingleCell {
			// For single cell data, create separate queries for chains A and B
			querySingleCell := []
			for ch in ["A", "B"] {
				queryTemp := {
					type: queryUniversal.type,
					operands: [
						queryUniversal.operands[1],
						{
							type: queryUniversal.operands[0].type,
							domain: {
								"pl7.app/alphabet": queryUniversal.operands[0].domain["pl7.app/alphabet"],
								"pl7.app/vdj/feature": queryUniversal.operands[0].domain["pl7.app/vdj/feature"],
								"pl7.app/vdj/scClonotypeChain": ch,
								"pl7.app/vdj/scClonotypeChain/index": "primary"
							},
							domainExactMatch: queryUniversal.operands[0].domainExactMatch
						},
						{
							type: queryUniversal.operands[2].type,
							axesKeys: [
								{
									domain: {
										"pl7.app/vdj/clonotypingRunId": queryUniversal.operands[2].axesKeys[0].domain["pl7.app/vdj/clonotypingRunId"]
									},
									domainExactMatch: queryUniversal.operands[2].axesKeys[0].domainExactMatch,
									name: "pl7.app/vdj/scClonotypeKey"
								}
							],
							partialMatch: queryUniversal.operands[2].partialMatch
						}
					]
				}
				querySingleCell += [queryTemp]
			}
			return querySingleCell
		}
	}

	// Query options
	ops := {
		single: true  // Return a single result
	}

	// Return different data structures based on whether it's single cell data
	if isSingleCell {
		return {
			data: wf.resolve(args.inputAnchor),  // Input data
			hasCells: true,  // Indicates this is single cell data
			// Query different antibody regions for both chains A and B
			aaCDR3ColA: wf.query(query("CDR3", isSingleCell)[0], ops),
			aaCDR1ColA: wf.query(query("CDR1", isSingleCell)[0], ops),
			aaCDR2ColA: wf.query(query("CDR2", isSingleCell)[0], ops),
			aaFR1ColA: wf.query(query("FR1", isSingleCell)[0], ops),
			aaVDJRegionColA: wf.query(query("VDJRegion", isSingleCell)[0], ops),
			aaCDR3ColB: wf.query(query("CDR3", isSingleCell)[1], ops),
			aaCDR1ColB: wf.query(query("CDR1", isSingleCell)[1], ops),
			aaCDR2ColB: wf.query(query("CDR2", isSingleCell)[1], ops),
			aaFR1ColB: wf.query(query("FR1", isSingleCell)[1], ops)
		}
	} else {
		return {
			data: wf.resolve(args.inputAnchor),  // Input data
			hasCells: false,  // Not single cell data
			// Query different antibody regions for the specified chain
			aaCDR3ColA: wf.query(query("CDR3", isSingleCell), ops),
			aaCDR1ColA: wf.query(query("CDR1", isSingleCell), ops),
			aaCDR2ColA: wf.query(query("CDR2", isSingleCell), ops),
			aaFR1ColA: wf.query(query("FR1", isSingleCell), ops)
		}
	}
})

wf.body(func(args) {
	hasCells := args.hasCells  // Flag indicating if this is single cell data
	columnsToExport := []
	
	// Collect the columns to export based on data type
	chain := undefined
	if hasCells {
		// For single cell data, get sequences for both chains A and B
		aaCDR3ColA := args.aaCDR3ColA
		aaCDR1ColA := args.aaCDR1ColA
		aaCDR2ColA := args.aaCDR2ColA
		aaFR1ColA := args.aaFR1ColA
		aaCDR3ColB := args.aaCDR3ColB
		aaCDR1ColB := args.aaCDR1ColB
		aaCDR2ColB := args.aaCDR2ColB
		aaFR1ColB := args.aaFR1ColB
		columnsToExport = [aaCDR3ColA, aaCDR1ColA, aaCDR2ColA, aaFR1ColA, aaCDR3ColB, aaCDR1ColB, aaCDR2ColB, aaFR1ColB]
	} else {
		// For bulk data, get sequences for the specified chain
		aaCDR3ColA := args.aaCDR3ColA
		aaCDR1ColA := args.aaCDR1ColA
		aaCDR2ColA := args.aaCDR2ColA
		aaFR1ColA := args.aaFR1ColA
		chain := args.chain
		heavyCDR3spec := aaCDR3ColA.spec
		columnsToExport = [aaCDR3ColA, aaCDR1ColA, aaCDR2ColA, aaFR1ColA]
	}

	for col in columnsToExport {
		col.spec.annotations["pl7.app/label"] = text.re_replace(" Primary", col.spec.annotations["pl7.app/label"], "")
	}
	clonotypingRunId := args.clonotypingRunId
	data := args.data
	
	// Get the clonotype key specification from the data
	clonotypeKeySpec := data.spec.axesSpec[1]

	// Export the sequences to a TSV file for processing
	tsv := xsv.exportFrame(columnsToExport, "tsv", {})

	// Run the liabilities calculation tool on the sequences
	liabilitiesCalcCmd := exec.builder().
		software(liabilitiesCalcSw).
		addFile("input.tsv", tsv).
		arg("input.tsv").
		saveFile("result.tsv").
		arg("result.tsv").
		run()

	// Get the results from the calculation
	result := liabilitiesCalcCmd.getFile("result.tsv")

	// Create a trace for tracking the liabilities calculation
	trace := pSpec.makeTrace(data.spec,
		{type: "milaboratories.antibody-sequence-liabilities", importance: 30, label: "Liabilities risk"})
	
	// Set up the axes for the output data
	axes := []
	if hasCells {
		axes = [
			{
				column: "Clone label",
				id: "clone-label",
				spec: clonotypeKeySpec
			}
		]
	} else {
		axes = [
			{
				column: "Clonotype key",
				id: "clonotypeKey",
				spec: clonotypeKeySpec
			}
		]
	}

	// Define the output columns - starting with the overall liabilities risk
	columns := [
		{
			column: "Liabilities risk",
			id: "liabilitiesRisk",
			naRegex: "",
			allowNA: true,
			spec: {
				name: "pl7.app/vdj/liabilitiesRisk",
				valueType: "String",
				annotations: {
					"pl7.app/trace": trace.valueStr,
					"pl7.app/label": "Liabilities risk",
					"pl7.app/vdj/isScore": "true",
					"pl7.app/table/visibility": "default",
					"pl7.app/table/orderPriority": "100"
				}
			}
		}
	]

	if hasCells {
		columns += [
			{
				column: "Heavy CDR3 aa",
				id: "cdr3-aa-primary-heavy",
				spec: {
 				name: "pl7.app/vdj/cdr3aaPrimaryHeavy",
 				valueType: "String",
 				domain: {
 					"pl7.app/vdj/clonotypingRunId": clonotypingRunId,
 					"pl7.app/vdj/scClonotypeChain": "A",
          			"pl7.app/vdj/scClonotypeChain/index": "primary"
 				},
 				annotations: {
 					"pl7.app/label": "Heavy CDR3 aa",
 					"pl7.app/table/visibility": "default",
					"pl7.app/table/orderPriority": "101"
					}
				}
			},
			{
				column: "Light CDR3 aa",
				id: "cdr3-aa-primary-light",
				spec: {
 				name: "pl7.app/vdj/cdr3aaPrimaryLight",
 				valueType: "String",
 				domain: {
 					"pl7.app/vdj/clonotypingRunId": clonotypingRunId,
 					"pl7.app/vdj/scClonotypeChain": "B",
          			"pl7.app/vdj/scClonotypeChain/index": "primary"
 				},
 				annotations: {
 					"pl7.app/label": "Light CDR3 aa",
 					"pl7.app/table/visibility": "default",
					"pl7.app/table/orderPriority": "101"
					}
				}
			}
		]
	} else {
		columns += [ 
			{
				column: "CDR3 aa",
				id: "CDR3aa",
				spec: {
 				name: "pl7.app/vdj/CDR3aa",
 				valueType: "String",
 				domain: {
 					"pl7.app/vdj/clonotypingRunId": clonotypingRunId,
 					"pl7.app/vdj/chain": chain
 				},
 				annotations: {
 					"pl7.app/label": "CDR3 aa",
 					"pl7.app/table/visibility": "default",
					"pl7.app/table/orderPriority": "101"
					}
				}
			}
		]
	}
	
	// Add columns for each sequence region's liabilities and risk
	columnsNames := ["CDR3", "CDR1", "CDR2", "FR1"]
	orderPriority := 99  // Priority for column ordering in UI
	for colName in columnsNames {
		columns += [
			{
			column: colName + " liabilities",
			id: text.to_lower(colName) + "-liabilities",
			naRegex: "",
			allowNA: true,
			spec: {
				name: "pl7.app/vdj/" + text.to_lower(colName) + "Liabilities",
				valueType: "String",
				annotations: {
					"pl7.app/label": colName + " liabilities",
					"pl7.app/table/orderPriority": string(orderPriority)
					}
				}
			},
			{
			column: colName + " risk",
			id: text.to_lower(colName) + "-risk",
			naRegex: "",
			allowNA: true,
			spec: {
				name: "pl7.app/vdj/" + text.to_lower(colName) + "Risk",
				valueType: "String",
				annotations: {
					"pl7.app/label": colName + " risk",
					"pl7.app/table/orderPriority": string(orderPriority-1)
					}
				}
			}
		]
		orderPriority -= 1  // Decrement priority for subsequent columns
	}

	// Define output specifications
	outputSpecs := 
		{
			axes: axes,
			columns: columns,
			storageFormat: "Binary",
			partitionKeyLength: 0
		}
	
	// Import the results into a data frame
	outputLiabilities := xsv.importFile(
		result,
		"tsv",
		outputSpecs
	)

	// Return the output and export the results
	return {
		outputs: {
			outputLiabilities: pframes.exportFrame(outputLiabilities)
		},

		exports: {
			exportLiabilities: {
				data: outputLiabilities["liabilitiesRisk.data"],
				spec: outputLiabilities["liabilitiesRisk.spec"]
			}
		}
	}
})
