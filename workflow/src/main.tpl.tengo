// Import required modules
wf := import("@platforma-sdk/workflow-tengo:workflow")  // Workflow utilities
exec := import("@platforma-sdk/workflow-tengo:exec")    // Command execution utilities
assets:= import("@platforma-sdk/workflow-tengo:assets") // Asset management
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv") // CSV/TSV handling
ll := import("@platforma-sdk/workflow-tengo:ll")        // Logging utilities
pframes := import("@platforma-sdk/workflow-tengo:pframes") // Data frames handling
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec") // Specification utilities
text := import("text")                                   // Text manipulation utilities
// Import the liabilities calculation software
liabilitiesCalcSw := assets.importSoftware("@platforma-open/milaboratories.antibody-sequence-liabilities.liabilities-calc-script:main")


// Prepare phase of the workflow - collects and sets up required data
wf.prepare(func(args) {

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.ignoreMissingDomains()  // Allow missing domains in the input data
	bundleBuilder.addAnchor("main", args.inputAnchor)  // Set the main anchor point for data

	// Collect all amino acid sequences from the input data
	bundleBuilder.addMulti({
		axes: [{ anchor: "main", idx: 1 }],
		name: "pl7.app/vdj/sequence",
		domain: {
			"pl7.app/alphabet": "aminoacid"
			}
		}, "sequences")

		return {
			columns: bundleBuilder.build()  // Build the column bundle for processing
		}
	}
)

wf.body(func(args) {
	columnsWithSequences := args.columns
	sequences := columnsWithSequences.getColumns("sequences")
	datasetSpec := columnsWithSequences.getSpec(args.inputAnchor)

	// Determine if we're working with single cell data
	isSingleCell := datasetSpec.axesSpec[1].name == "pl7.app/vdj/scClonotypeKey"

	// Start building the table with sequence data
	seqTable := columnsWithSequences.xsvTableBuilder()
	seqTable.setAxisHeader(datasetSpec.axesSpec[1].name, "clonotypeKey")

	// Define which antibody regions we want to analyze
	features := ["CDR3", "CDR1", "CDR2", "FR1"]
	toAdd := {}
	for feature in features {
		toAdd[feature] = true
	}
	
	// Organize columns by feature type (CDR3, CDR1, etc.)
	filteredColumns := {}
	for col in sequences {
		feature := col.spec.domain["pl7.app/vdj/feature"]
		if toAdd[feature] {
			if filteredColumns[feature]  {
				filteredColumns[feature] += [col]
			} else {
				filteredColumns[feature] = [col]
			}
		}
	}

	// Track which features are actually present in the data
	coveredFeatures := []
	for k, v in filteredColumns {
		coveredFeatures += [k]
	}

	// Add sequence columns to the table based on available features
	for feature in coveredFeatures {
		entries := filteredColumns[feature]
		ll.print("__THE_LOG__"+entries)
		if len(entries) == 1 {
			// For bulk data with a single chain
			seqTable.add(entries[0].key, {header: feature+" aa"})
		} else if len(entries) > 1 {
			// For single cell data with multiple chains
			for col in entries {
				if col.spec.domain["pl7.app/vdj/scClonotypeChain/index"] == "primary" {
					chain := col.spec.domain["pl7.app/vdj/scClonotypeChain"]
					// Label as Heavy (A chain) or Light (B chain)
					seqTable.add(col.key, {header: (chain == "A" ? "Heavy" : "Light") + " " + feature+" aa"})
				}
			}
		}
	}

	// Build the final TSV table
	seqTable = seqTable.build("tsv")
		
	// Get the clonotype key specification from the data
	clonotypeKeySpec := datasetSpec.axesSpec[1]

	// Run the liabilities calculation tool on the sequences
	liabilitiesCalcCmd := exec.builder().
		software(liabilitiesCalcSw).
		addFile("input.tsv", seqTable).
		arg("input.tsv").
		saveFile("result.tsv").
		arg("result.tsv").
		run()

	// Get the results from the calculation
	result := liabilitiesCalcCmd.getFile("result.tsv")

	// Create a trace for tracking the liabilities calculation
	trace := pSpec.makeTrace(datasetSpec,
		{type: "milaboratories.antibody-sequence-liabilities", importance: 30, label: "Liabilities risk"})
	
	// Set up the axes for the output data - using clonotype key
	axes := [
		{
			column: "clonotypeKey",
			spec: clonotypeKeySpec
		}
	]

	// Define the output columns - starting with the overall liabilities risk
	columns := [
		{
			column: "Liabilities risk",
			id: "liabilitiesRisk",
			naRegex: "",
			allowNA: true,
			spec: {
				name: "pl7.app/vdj/liabilitiesRisk",
				valueType: "String",
				annotations: {
					"pl7.app/trace": trace.valueStr,
					"pl7.app/label": "Liabilities risk",
					"pl7.app/isDiscreteFilter": "true",
            		"pl7.app/discreteValues": "['Low', 'Medium', 'High']",
					"pl7.app/vdj/isScore": "true",
					"pl7.app/table/visibility": "default",
					"pl7.app/table/orderPriority": "100"
				}
			}
		}
	]

	// Add different columns based on data type (single cell vs bulk)
	if isSingleCell {
		// For single cell: show both heavy and light chain CDR3 sequences
		columns += [
			{
				column: "Heavy CDR3 aa",
				id: "cdr3-aa-primary-heavy",
				spec: {
 				name: "pl7.app/vdj/cdr3aaPrimaryHeavy",
 				valueType: "String",
 				domain: {
          			"pl7.app/alphabet": "aminoacid",
          			"pl7.app/vdj/feature": "CDR3",
          			"pl7.app/vdj/scClonotypeChain": "A",
          			"pl7.app/vdj/scClonotypeChain/index": "primary"
        		},
 				annotations: {
 					"pl7.app/label": "Heavy CDR3 aa",
 					"pl7.app/table/visibility": "default",
					"pl7.app/table/orderPriority": "101"
					}
				}
			},
			{
				column: "Light CDR3 aa",
				id: "cdr3-aa-primary-light",
				spec: {
 				name: "pl7.app/vdj/cdr3aaPrimaryLight",
 				valueType: "String",
 				domain: {
         			"pl7.app/alphabet": "aminoacid",
          			"pl7.app/vdj/feature": "CDR3",
          			"pl7.app/vdj/scClonotypeChain": "B",
          			"pl7.app/vdj/scClonotypeChain/index": "primary"
        		},
 				annotations: {
 					"pl7.app/label": "Light CDR3 aa",
 					"pl7.app/table/visibility": "default",
					"pl7.app/table/orderPriority": "101"
					}
				}
			}
		]
	} else {
		// For bulk data: show single CDR3 sequence
		columns += [ 
			{
				column: "CDR3 aa",
				id: "CDR3aa",
				spec: {
 				name: "pl7.app/vdj/CDR3aa",
 				valueType: "String",
 				domain: {
					"pl7.app/alphabet": "aminoacid",
					"pl7.app/vdj/feature": "CDR3"
				},
 				annotations: {
 					"pl7.app/label": "CDR3 aa",
 					"pl7.app/table/visibility": "default",
					"pl7.app/table/orderPriority": "101"
					}
				}
			}
		]
	}
	
	// Add columns for each sequence region's liabilities and risk
	orderPriority := 99  // Priority for column ordering in UI
	for colName in coveredFeatures {
		columns += [
			{
			// Column for detailed liabilities text
			column: colName + " liabilities",
			id: text.to_lower(colName) + "-liabilities",
			naRegex: "",
			allowNA: true,
			spec: {
				name: "pl7.app/vdj/" + text.to_lower(colName) + "Liabilities",
				valueType: "String",
				annotations: {
					"pl7.app/label": colName + " liabilities",
					"pl7.app/table/orderPriority": string(orderPriority)
					}
				}
			},
			{
			// Column for risk level (Low, Medium, High)
			column: colName + " risk",
			id: text.to_lower(colName) + "-risk",
			naRegex: "",
			allowNA: true,
			spec: {
				name: "pl7.app/vdj/" + text.to_lower(colName) + "Risk",
				valueType: "String",
				annotations: {
					"pl7.app/label": colName + " risk",
					"pl7.app/table/orderPriority": string(orderPriority-1)
					}
				}
			}
		]
		orderPriority -= 1  // Decrement priority for subsequent columns
	}

	// Define output specifications for the data frame
	outputSpecs := 
		{
			axes: axes,
			columns: columns,
			storageFormat: "Binary",
			partitionKeyLength: 0
		}
	
	// Import the results into a data frame
	outputLiabilities := xsv.importFile(
		result,
		"tsv",
		outputSpecs
	)

	// Return the output and export the results
	return {
		outputs: {
			outputLiabilities: pframes.exportFrame(outputLiabilities)
		},

		exports: {
			exportLiabilities: {
				data: outputLiabilities["liabilitiesRisk.data"],
				spec: outputLiabilities["liabilitiesRisk.spec"]
			}
		}
	}
})
